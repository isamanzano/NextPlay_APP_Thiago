import 'package:flutter/material.dart';
import 'package:projetostreaming/pages/Cadastro.dart';
import 'package:projetostreaming/pages/home.dart';
import 'package:projetostreaming/pages/login.dart';
import 'package:projetostreaming/shared/style.dart';

class Login extends StatefulWidget {
  const Login({super.key});


  @override
  State<Login> createState() => _LoginState();
}


class _LoginState extends State<Login> {
  final _formKey = GlobalKey<FormState>();
  bool _showPassword = false;


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.transparent,
     
   
      body: Container(
        height: MediaQuery.of(context).size.height * 1,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              MyColors.azulBottomGradiente, MyColors.azulEscuro, MyColors.azulTopGradiente
            ],
            stops: [0.0, 0.5, 0.8], // Posições das cores no degradê
            begin: Alignment.topCenter,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: Container(


            height: 550,
            padding: const EdgeInsets.all(30),
            margin: const EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: const Color.fromARGB(106, 255, 255, 255),
              borderRadius: BorderRadius.circular(8.0), // Adiciona bordas arredondadas
            ),
        child: Form(
          key: _formKey,
          child:SingleChildScrollView(
            child: Column(    
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                 Center(
                   child: Image.asset(
                      'assets/logo.png', // Substitua pelo caminho da sua imagem
                      height: 150, // Altura da imagem
                      fit: BoxFit.contain, // Ajuste o conteúdo da imagem
                    ),
                 ),
                  SizedBox(height: 20), // Espaçamento entre a imagem e o formulário
                 
                TextFormField(
                  autofocus: true,
                  decoration: InputDecoration(
                    icon: Icon(Icons.mail),
                    hintText: "informe o E-mail",
       
                  ),
                 validator: (String? email) {
                    if (email == "" || email == null) {
                      return "O email não pode ser vazio";
                    }
                    if (email.length < 6) {
                      return "O email está muito curto";
                    }
                    if (!email.contains("@")) {
                      return "O email é inválido";
                    }
                    return null;
                  },
                ),
                SizedBox(height: 10),
                TextFormField(
                  obscureText: _showPassword == false ? true : false,
                  autofocus: true,


                  decoration: InputDecoration(
                    icon: const Icon(Icons.lock),
                    suffixIcon: GestureDetector(child: Icon(
                    _showPassword == false ? Icons.visibility_off : Icons.visibility,
                    ),
                   
                    onTap:(){
                      setState(() {
                        _showPassword = !_showPassword;
                      });


                    }),
                    hintText: "informe a Senha",
       
                  ),
                 validator: (String? password) {
                    if (password == "" || password == null) {
                      return "A senha não pode estar vazia";
                    }
                    return null;
                  },
                ),
               
                SizedBox(height: 10),
                Center(
                  child: ElevatedButton(
                    onPressed: (){buttonEnterClick();}, child: Text("Entrar"),
                  style: ElevatedButton.styleFrom(
                   
                    fixedSize: Size(200, 50),
                    backgroundColor: const Color.fromARGB(255, 33, 82, 243),
                    foregroundColor: const Color.fromARGB(255, 255, 255, 255),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.zero,
                    ),
                   
                  ),
                  ),
                ),
                 const Divider(),
                  TextButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const Cadastro()),
                      );
                    },
                    child: const Text(
                      "Me cadastrar",
                      style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
                    ),
                  ),
                  const Text("Não tem uma conta? Clique no link acima."),
              ],
            ),
          ),
          ),
        ),
      ),
    ),
    );
  }




  void buttonEnterClick() {
    if (_formKey.currentState!.validate()) {
      // Navega para a tela Home usando pushReplacement
    } else {
      print("Erro na validação do formulário");
    }
  }
}



////////////////////////////////////////////


import 'dart:async';
import 'package:flutter/material.dart';
import 'package:projetostreaming/pages/login.dart';
import 'package:projetostreaming/shared/style.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {
  late AnimationController _logoController; // Controlador da animação da logo.
  late AnimationController _loadingController; // Controlador da animação de carregamento.
  late Animation<Offset> _slideAnimation; // Animação de deslizamento.
  bool _showLoadingIcon = false; // Controla a exibição do ícone de carregamento.

  @override
  void initState() {
    super.initState();

    // Inicializa o controlador da animação da logo.
    _logoController = AnimationController(
      duration: const Duration(seconds: 2), // Duração da animação da logo
      vsync: this,
    );

    // Inicializa o controlador da animação de carregamento.
    _loadingController = AnimationController(
      duration: const Duration(seconds: 3), // Duração da rotação
      vsync: this,
    );

    // Define a animação de deslizamento.
    _slideAnimation = Tween<Offset>(
      begin: Offset(0.0, 1.0), // Começa fora da tela (abaixo).
      end: Offset(0.0, 0.0),   // Termina na posição normal (visível).
    ).animate(CurvedAnimation(
      parent: _logoController, // Associa a animação ao controlador da logo.
      curve: Curves.easeInOut, // Define uma curva suave para a animação.
    ));

    // Inicia a animação da logo.
    _animateLogo();
  }

  void _animateLogo() {
    _logoController.forward().then((_) {
      // Após a animação da logo, ativa o ícone de carregamento.
      setState(() {
        _showLoadingIcon = true; // Atualiza o estado para mostrar o ícone de carregamento.
      });

      // Inicia a rotação do ícone de carregamento.
      _startLoadingAnimation();
    });
  }

  void _startLoadingAnimation() {
    _loadingController.repeat(); // Inicia a rotação do ícone de carregamento.

    // Aguarda 3 segundos antes de mudar para a tela de Login.
    Future.delayed(const Duration(seconds: 3), () {
      if (mounted) {
        _loadingController.stop(); // Para a animação de carregamento.
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const Login()), // Navega para a tela de Login.
        );
      }
    });
  }

  @override
  void dispose() {
    _logoController.dispose(); // Libera os recursos do controlador da logo.
    _loadingController.dispose(); // Libera os recursos do controlador de carregamento.
    super.dispose(); // Chama o método dispose da superclasse.
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        height: MediaQuery.of(context).size.height * 1,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              MyColors.gradient1,
              MyColors.gradient2,
            ],
            stops: [0.0, 0.8], // Posições das cores no degradê
            begin: Alignment.topCenter,
            end: Alignment.bottomRight, // Fim do gradiente.
          ),
        ),
        child: Center( // Centraliza os widgets dentro do container.
          child: SlideTransition( // Aplica a animação de deslizamento.
            position: _slideAnimation, // A animação que controla a posição.
            child: Column( // Alinha os filhos verticalmente.
              mainAxisAlignment: MainAxisAlignment.center, // Centraliza verticalmente.
              children: [
                Image.asset("assets/logo.png"), // Exibe a logo a partir dos assets.
                const SizedBox(height: 20), // Espaçamento vertical.
                if (_showLoadingIcon) // Mostra o ícone de carregamento somente se _showLoadingIcon for verdadeiro.
                  AnimatedBuilder(
                    animation: _loadingController,
                    builder: (context, child) {
                      return Transform.rotate(
                        angle: _loadingController.value * 2.0 * 3.14159, // Animação de rotação.
                        child: Image.asset(
                          "assets/loading.png",
                          color: Colors.white,
                          width: 80,
                          height: 80,
                          semanticLabel: 'Ícone de carregamento',
                        ),
                      );
                    },
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

